"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream = require("stream");
/**
 * Transform the output of an Observable into a node readable stream.
 */
function rxToStream(src, options = { encoding: 'utf8' }, onError) {
    return new ReadableObservableStream(options, src, onError);
}
exports.rxToStream = rxToStream;
class ReadableObservableStream extends stream.Readable {
    constructor(options, _source, _onError) {
        super(options);
        this._source = _source;
        this._onError = _onError;
        this._isOpen = false;
        this._hasError = false;
        this._waiting = false;
        this._buffer = [];
    }
    emitError() {
        this.emit('error', this._error);
        if (this._onError) {
            this._onError(this._error, this);
        }
    }
    _read() {
        const { _buffer } = this;
        if (!this._subscription) {
            this._isOpen = true;
            this._waiting = true;
            this._subscription = this._source.subscribe({
                next: value => {
                    if (this._waiting) {
                        this._waiting = this.push(value);
                    }
                    else {
                        _buffer.push(value);
                    }
                },
                error: (err) => {
                    this._isOpen = false;
                    this._hasError = true;
                    this._error = err;
                    if (this._waiting) {
                        this.emitError();
                    }
                },
                complete: () => {
                    this._isOpen = false;
                    if (this._waiting) {
                        this.push(null);
                    }
                },
            });
        }
        if (_buffer.length > 0) {
            while (_buffer.length > 0) {
                this._waiting = this.push(_buffer.shift());
                if (!this._waiting)
                    break;
            }
        }
        else {
            if (this._isOpen) {
                this._waiting = true;
            }
            else {
                if (this._hasError) {
                    this.emitError();
                }
                else {
                    this.push(null);
                }
            }
        }
    }
}
//# sourceMappingURL=rxToStream.js.map